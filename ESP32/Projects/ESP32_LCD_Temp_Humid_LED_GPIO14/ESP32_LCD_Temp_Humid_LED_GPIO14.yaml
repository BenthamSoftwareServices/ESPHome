esphome:
  name: esp32
  friendly_name: ESP32

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "workroom"
    password: "robinho0d"

captive_portal:

web_server:
  port: 80

  # Define PWM output for the light
output:
  - platform: ledc
    pin: GPIO14 # Change to the GPIO pin you are using
    frequency: 1000 Hz
    id: pwm_output

# Define the light component
light:
  - platform: monochromatic
    name: "ESP32 PWM Light"
    output: pwm_output

sensor:
# Include all sensor devices in the single sensor: domain
# Read ADC voltage
  - platform: adc
    pin: GPIO32  # Change this to your ADC pin
    name: "Measured Voltage"
    id: measured_voltage
    update_interval: 1s
    # On the ESP32 the voltage measured with the ADC caps out at ~1.1V by default as the sensing range (attenuation of the ADC) is set to 0db by default.
    # Measuring higher voltages requires setting attenuation to one of the following values: 0db, 2.5db, 6db, 12db. There’s more information at the manufacturer’s website.
    # https://docs.espressif.com/projects/esp-idf/en/v4.4.7/esp32/api-reference/peripherals/adc.html#_CPPv425adc1_config_channel_atten14adc1_channel_t11adc_atten_t
    # To simplify this, we provide the setting attenuation: auto for an automatic/seamless transition among scales. Our implementation combines all available ranges to allow the best resolution without having to compromise on a specific attenuation.
    attenuation: auto
    accuracy_decimals: 2
    filters:
      - multiply: 1.0  # Scale factor, modify based on your voltage divider

# Include all sensor devices in the single sensor: domain
# DHT11 Temperature + Humidity Sensor
# The DHT11 requires external pull up resistors on the data line. To do this, solder a resistor with about 4.7kΩ between DATA and 3.3V.
  - platform: dht
    model: DHT11
    pin: GPIO4
    temperature:
      id: dht11_temperature
      name: "Work Room Temperature"
    humidity:
      id: dht11_humidity
      name: "Work Room Humidity"
    update_interval: 60s

# Display WiFi signal strength
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: wifi_signal_strength
    update_interval: 60s    

# I²C configuration (pins depend on your ESP32 board, default GPIO21 and GPIO22)
i2c:
  scl: 22
  sda: 21
  scan: False # Set to true if I2C address not known
  id: bus_a
  # Set the frequency the I²C bus should operate on. Defaults to 50kHz. Values are 10kHz, 50kHz, 100kHz, 200kHz, … 800kHz
  frequency: 200kHz # Avoids error message: Component display took a long time for an operation (204 ms). Components should block for at most 30 ms.

display:
  # LCD Display configuration
  - platform: lcd_pcf8574
    dimensions: 16x2
    address: 0x27  # I2C address (commonly 0x27 or 0x3F; adjust if needed)
    lambda: |-
      it.printf(0, 0, "Voltage: %.2fV", id(measured_voltage).state);
      it.printf(0, 1, "T:%.1fC", id(dht11_temperature).state);
      it.printf(8, 1, "H:%.1f%%", id(dht11_humidity).state);
  # For formatting info: https://esphome.io/components/display/#display-engine:~:text=Static%20text%20by%20itself,is%20way%20better%20documented%20%3A)